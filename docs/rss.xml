<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://ignorantcaomao.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://ignorantcaomao.github.io</link></image><lastBuildDate>Mon, 23 Dec 2024 08:28:07 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Jenkins pipeline 样例脚本</title><link>https://ignorantcaomao.github.io/post/Jenkins%20pipeline%20-yang-li-jiao-ben.html</link><description>```groovy&#13;
// 做下拉框联动&#13;
// 需要用到scriptler插件&#13;
// 下面是scriptler中的样例脚本&#13;
/**&#13;
List devList  = ['None']&#13;
List testList  = ['itmg-ariot-abs-iot-manager']&#13;
List stageList = ['Select:selected', 'stage1']&#13;
List prodList  = ['itmg-ariot-abs-iot-manager']&#13;
&#13;
List default_item = ['None']&#13;
&#13;
if (Environment == 'DEV') {&#13;
  return devList&#13;
} else if (Environment == 'TEST') {&#13;
  return testList&#13;
} else if (Environment == 'STAGE') {&#13;
  return stageList&#13;
} else if (Environment == 'PROD') {&#13;
  return prodList&#13;
} else {&#13;
  return default_item&#13;
}&#13;
*/&#13;
&#13;
properties([&#13;
  // 管道速度/耐久性覆盖&#13;
  durabilityHint('PERFORMANCE_OPTIMIZED'), &#13;
  // 保留已完成构建的储藏&#13;
  preserveStashes(), &#13;
  // 配置联动选框&#13;
  parameters([&#13;
    activeChoice(choiceType: 'PT_SINGLE_SELECT', description: '选类型', filterLength: 1, filterable: false, name: 'Environment', randomName: 'choice-parameter-779608790271869', script: scriptlerScript(isSandboxed: true, scriptlerBuilder: [builderId: '1726884996564_17', parameters: [], propagateParams: false, scriptId: 'Environments.groovy'])), &#13;
    reactiveChoice(choiceType: 'PT_CHECKBOX', description: '应用列表', filterLength: 1, filterable: true, name: 'Servers', randomName: 'choice-parameter-779608792418725', referencedParameters: 'Environment', script: scriptlerScript(isSandboxed: true, scriptlerBuilder: [builderId: '1726884996566_18', parameters: [], propagateParams: false, scriptId: 'BackendAriot.groovy']))&#13;
    ])&#13;
  ])&#13;
&#13;
pipeline {&#13;
    agent any&#13;
    &#13;
    tools {&#13;
      maven 'local-mvn'&#13;
      jdk 'jdk-11'&#13;
    }&#13;
&#13;
    options {&#13;
        buildDiscarder(logRotator(numToKeepStr: '3')) //保留三个历史构建版本&#13;
    }&#13;
&#13;
    parameters {&#13;
        // 代码地址&#13;
        string(defaultValue: 'http://114.255.128.176:88/syb-dev/root/h-itmg/service/bcl/ariot.git', description: '代码仓库地址', name: 'Gitlab_Registry_URL')&#13;
        // 版本分支&#13;
        gitParameter(branch: '', branchFilter: '.*', defaultValue: 'sz_dev', description: '代码分支', name: 'branch', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'GitParameterDefinition')&#13;
    }&#13;
&#13;
    environment {&#13;
        commitLog = ''&#13;
        commit_author = ''&#13;
        SonarQube_URL='http://192.168.3.30:9100'&#13;
        SonarQube_Secret='sqa_cdfa9063791ff2b619703c6ed3d55cad84ea7407'&#13;
        ProjectName='${env.JOB_NAME}'&#13;
        scannerHome = tool 'SonarQube_Scanner_4.8'&#13;
        DOCKER_REPOSITORY='registry.cn-gdgz1.ctyun.cn/h-vpp'&#13;
        build_time = ''&#13;
        build_dir = 'itmg-bcl-ariot-abs'&#13;
        multiple_platform = '--platform=linux/arm64,linux/amd64'&#13;
    }&#13;
    &#13;
&#13;
    stages {&#13;
        stage('代码拉取') {&#13;
            steps {&#13;
                echo '拉取Git代码'&#13;
                checkout scmGit(branches: [[name: '${branch}']], extensions: [], userRemoteConfigs: [[credentialsId: '53773151-da42-4355-8504-45bcb0abb1eb', url: '${Gitlab_Registry_URL}']])&#13;
                &#13;
                script{&#13;
                  // 获取最近一次代码提交信息&#13;
                  commitLog = sh(script: 'git log --oneline -n 1',returnStdout: true).trim()&#13;
                  echo 'Git Commit Log:\n${commitLog}'&#13;
                  &#13;
                  commit_author = sh(script: 'git log -n 1 --pretty=format:'%an'',returnStdout: true).trim()&#13;
                  echo 'Git Commit Author:\n${commit_author}'&#13;
        &#13;
                  commit_counters = sh(script: 'git log --oneline | wc -l',returnStdout: true).trim()&#13;
                  echo 'Git Commit Counters:\n${commit_counters}'&#13;
&#13;
                  build_time = sh (script: 'date +%Y%m%d%H%M', returnStdout: true).trim()&#13;
                  echo 'build time:\n${build_time}'&#13;
                } &#13;
            }&#13;
        }&#13;
&#13;
        stage('SonarQube Analysis') {&#13;
            when {&#13;
              expression { &#13;
                  // 检查复选框的值，如果包含'DEV'，则执行步骤&#13;
                  return params.Environment.contains('DEV') &#13;
              }&#13;
            }&#13;
            steps{&#13;
                echo '代码质量检查'&#13;
                script{&#13;
                    def SonarQube_URL=env.SonarQube_URL&#13;
                    def SonarQube_Secret=env.SonarQube_Secret&#13;
&#13;
                    echo '${ProjectName}'&#13;
                    echo '${SonarQube_URL}'&#13;
                    echo '${SonarQube_Secret}'&#13;
                    def sonarProperties = [&#13;
                            'sonar.projectKey=${ProjectName}',&#13;
                            'sonar.host.url=${SonarQube_URL}',&#13;
                            'sonar.login=${SonarQube_Secret}'&#13;
                            ]&#13;
                    withSonarQubeEnv('SonarQube') {&#13;
                        sh 'mvn sonar:sonar -D${sonarProperties.join(' -D')}'&#13;
                    }&#13;
                    &#13;
                    // 代码检测失败,将不再继续执行后面的任务,直接退出,报告返回的超时时长设为5分钟&#13;
                    timeout(time: 3,unit: 'MINUTES') {&#13;
                        waitForQualityGate abortPipeline: true&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
       // 引用其他的包&#13;
        stage('构建基础依赖') {&#13;
          when {&#13;
            anyOf {&#13;
              expression { return params.Environment.contains('TEST') }&#13;
              expression { return params.Environment.contains('PROD') } &#13;
            }&#13;
          }  &#13;
          steps {&#13;
            echo '构建基础依赖'&#13;
            script {&#13;
&#13;
              // 使用build调度前端job，并传参，将结果赋值给dtkBuild&#13;
            //   def dtkBuild=build(job: 'backend-dtk', parameters: [gitParameter(name: 'branch', value: params.branch)])       &#13;
            //   println dtkBuild.getProjectName()&#13;
            //   println dtkBuild.getNumber()&#13;
            //   println dtkBuild.getBuildVariables() &#13;
              // println dtkBuild.buildVariables.image_tag&#13;
              // 使用build调度前端job，并传参，将结果赋值给dtkBuild&#13;
              def iotBuild=build(job: 'backend-iot', parameters: [gitParameter(name: 'branch', value: params.branch)])       &#13;
              println iotBuild.getProjectName()&#13;
              println iotBuild.getNumber()&#13;
              println iotBuild.getBuildVariables() &#13;
            }&#13;
&#13;
          }&#13;
        }&#13;
        &#13;
        &#13;
        stage('编译') {&#13;
          when {&#13;
            anyOf {&#13;
              expression { return params.Environment.contains('TEST') }&#13;
              expression { return params.Environment.contains('PROD') } &#13;
            }&#13;
          }  &#13;
          steps {&#13;
            echo '编译打包'&#13;
            script {&#13;
              sh 'mvn clean install -Dmaven.test.skip=true -Ddockerfile.skip=true'&#13;
            }&#13;
&#13;
          }&#13;
        }&#13;
&#13;
         stage('打包镜像') {&#13;
           when {&#13;
               anyOf {&#13;
                 expression { return params.Environment.contains('TEST') }&#13;
                 expression { return params.Environment.contains('PROD') } &#13;
               }&#13;
           }  &#13;
           steps {&#13;
             echo '打包镜像'&#13;
             script {&#13;
               for (server in params.Servers.tokenize(',')) {&#13;
                 sh 'docker build -t ${DOCKER_REPOSITORY}/${server}:${build_time}_${commit_counters} ${build_dir}/${server} --no-cache'&#13;
                 sh 'docker push ${DOCKER_REPOSITORY}/${server}:${build_time}_${commit_counters}'&#13;
                 sh 'docker rmi ${DOCKER_REPOSITORY}/${server}:${build_time}_${commit_counters}'&#13;
               }&#13;
             }&#13;
&#13;
           }&#13;
         }&#13;
        &#13;
        stage('部署') {&#13;
          when {&#13;
            expression { return params.Environment.contains('TEST') }&#13;
          }  &#13;
          steps {&#13;
            echo '部署到测试环境'&#13;
            &#13;
            script {&#13;
              for (server in params.Servers.tokenize(',')) {&#13;
                def substr = server.split('-')[-1]&#13;
                def deploy = 'ariot-${substr}'&#13;
                echo '${deploy}'&#13;
                def command = 'kubectl set image deployment/${deploy} ${deploy}=${DOCKER_REPOSITORY}/${server}:${build_time}_${commit_counters} -n hvpp'&#13;
                echo '${command}'&#13;
                sh 'ssh root@192.168.3.57 ${command}'&#13;
              }&#13;
            }&#13;
          }&#13;
        }&#13;
&#13;
        stage('构建多架构镜像，自动更新演示环境') {&#13;
          when {&#13;
            expression { return params.Environment.contains('PROD') }&#13;
          }  &#13;
&#13;
          steps {&#13;
            echo '构建多架构镜像，并更新演示环境'&#13;
            script {&#13;
              // 登录华为云镜像镜仓库， 天翼云镜像仓库无法打多版本镜像&#13;
              sh 'docker login -u cn-north-1@IY2FYXRHUQVKV5DAA1A2 -p 6d094a81650d98fdd2e476d3a6a5132ed2d63f5e1a48221ab4ea7a1f4fc18ee4 swr.cn-north-1.myhuaweicloud.com'&#13;
              for (server in params.Servers.tokenize(',')) {&#13;
&#13;
                // docker buildx build -t registry.cn-gdgz1.ctyun.cn/h-vpp/hvpp-base:multiple --build-context name=/home/docker-test/aif-auth  --no-cache   --push --provenance=false .&#13;
                sh 'cd ${build_dir}/${server} &amp;&amp; docker buildx build -t swr.cn-north-1.myhuaweicloud.com/h-vpp/${server}:${build_time}_${commit_counters} ${multiple_platform} --no-cache --push --provenance=false .'&#13;
 &#13;
                &#13;
                // 更新演示环境(192.168.3.30)里docker-compose里的image值&#13;
                def image='swr.cn-north-1.myhuaweicloud.com/h-vpp/${server}:${build_time}_${commit_counters}'&#13;
                sh '''&#13;
                    ssh 192.168.3.30 'yq -i '.services.${server}.image=\\'${image}\\'' /home/hvpp-demo/backend/ariot.yaml'&#13;
                    '''&#13;
                // 执行更新动作&#13;
                sh '''&#13;
                    ssh 192.168.3.30 'cd /home/hvpp-demo/backend &amp;&amp; docker-compose -f ariot.yaml up -d ${server}'&#13;
                '''&#13;
                // 更新一个镜像停止1s&#13;
                sleep(1)&#13;
              }&#13;
            }&#13;
&#13;
          }&#13;
&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
```。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/Jenkins%20pipeline%20-yang-li-jiao-ben.html</guid><pubDate>Mon, 23 Dec 2024 08:27:40 +0000</pubDate></item><item><title>K8S 上Prometheus具体实践</title><link>https://ignorantcaomao.github.io/post/K8S%20-shang-Prometheus-ju-ti-shi-jian.html</link><description>在 Kubernetes 上部署 Prometheus 时，推荐使用 **Prometheus Operator**，它可以极大地简化 Prometheus 的配置和管理。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/K8S%20-shang-Prometheus-ju-ti-shi-jian.html</guid><pubDate>Mon, 16 Dec 2024 02:53:09 +0000</pubDate></item><item><title>构建支持混合架构的 Docker 镜像</title><link>https://ignorantcaomao.github.io/post/gou-jian-zhi-chi-hun-he-jia-gou-de-%20Docker%20-jing-xiang.html</link><description>要实现基于 x86 架构构建支持 x86 和 ARM 混合架构的 Docker 镜像，并确保不同架构的设备拉取匹配的镜像，可以使用 Docker 的 Buildx 工具进行多架构构建并推送到镜像仓库。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/gou-jian-zhi-chi-hun-he-jia-gou-de-%20Docker%20-jing-xiang.html</guid><pubDate>Fri, 13 Dec 2024 09:02:15 +0000</pubDate></item><item><title>使用 Helm 安装和管理 Istio</title><link>https://ignorantcaomao.github.io/post/shi-yong-%20Helm%20-an-zhuang-he-guan-li-%20Istio.html</link><description>使用 Helm 安装和管理 Istio 是一种非常灵活的方式，适合需要自定义配置的用户。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/shi-yong-%20Helm%20-an-zhuang-he-guan-li-%20Istio.html</guid><pubDate>Thu, 12 Dec 2024 09:40:49 +0000</pubDate></item><item><title>11 个必备 Docker 工具</title><link>https://ignorantcaomao.github.io/post/11%20-ge-bi-bei-%20Docker%20-gong-ju.html</link><description>https://mp.weixin.qq.com/s/pjvjTXhcrON0FdAak1pxWw。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/11%20-ge-bi-bei-%20Docker%20-gong-ju.html</guid><pubDate>Wed, 04 Dec 2024 02:33:10 +0000</pubDate></item><item><title>k8s 问题排查流程图</title><link>https://ignorantcaomao.github.io/post/k8s%20-wen-ti-pai-cha-liu-cheng-tu.html</link><description>![微信图片_20241204101902](https://github.com/user-attachments/assets/0f06e502-0029-45af-bacb-8956f50359e2)&#13;
。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/k8s%20-wen-ti-pai-cha-liu-cheng-tu.html</guid><pubDate>Wed, 04 Dec 2024 02:19:54 +0000</pubDate></item><item><title>docker-compose 部署配置mysql 主从</title><link>https://ignorantcaomao.github.io/post/docker-compose%20-bu-shu-pei-zhi-mysql%20-zhu-cong.html</link><description>使用 **Docker Compose** 搭建 **MySQL 主从复制**是一种快速、高效的方式。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/docker-compose%20-bu-shu-pei-zhi-mysql%20-zhu-cong.html</guid><pubDate>Fri, 22 Nov 2024 02:57:00 +0000</pubDate></item><item><title>站点可靠性工程 SRE 最佳实践 -- 黄金监控信号</title><link>https://ignorantcaomao.github.io/post/zhan-dian-ke-kao-xing-gong-cheng-%20SRE%20-zui-jia-shi-jian-%20--%20-huang-jin-jian-kong-xin-hao.html</link><description>```python&#13;
from fastapi import FastAPI, Request, HTTPException, Response&#13;
from prometheus_client import Counter, Gauge, Histogram, generate_latest, CONTENT_TYPE_LATEST&#13;
from starlette.responses import StreamingResponse&#13;
import time&#13;
import psutil&#13;
&#13;
app = FastAPI()&#13;
&#13;
# Define Prometheus metrics&#13;
http_requests_total = Counter(&#13;
    'http_requests_total',&#13;
    'Total number of HTTP requests',&#13;
    ['method', 'endpoint', 'http_status']&#13;
)&#13;
http_request_duration_seconds = Histogram(&#13;
    'http_request_duration_seconds',&#13;
    'HTTP request duration in seconds',&#13;
    ['method', 'endpoint']&#13;
)&#13;
http_request_size_bytes = Histogram(&#13;
    'http_request_size_bytes',&#13;
    'HTTP request size in bytes',&#13;
    ['method', 'endpoint']&#13;
)&#13;
http_response_size_bytes = Histogram(&#13;
    'http_response_size_bytes',&#13;
    'HTTP response size in bytes',&#13;
    ['method', 'endpoint']&#13;
)&#13;
active_requests = Gauge(&#13;
    'active_requests',&#13;
    'Number of active requests'&#13;
)&#13;
error_counter = Counter(&#13;
    'error_counter',&#13;
    'Total number of HTTP errors',&#13;
    ['method', 'endpoint', 'http_status']&#13;
)&#13;
&#13;
cpu_usage = Gauge('cpu_usage_percent', 'CPU usage in percent')&#13;
memory_usage = Gauge('memory_usage_percent', 'Memory usage in percent')&#13;
disk_usage = Gauge('disk_usage_percent', 'Disk usage in percent')&#13;
network_in = Gauge('network_received_bytes', 'Network received bytes')&#13;
network_out = Gauge('network_sent_bytes', 'Network sent bytes')&#13;
&#13;
@app.middleware('http')&#13;
async def record_request_start_time(request: Request, call_next):&#13;
    request.state.start_time = time.time()&#13;
    response = await call_next(request)&#13;
    return response&#13;
&#13;
@app.middleware('http')&#13;
async def record_request_end_time(request: Request, call_next):&#13;
    response = await call_next(request)&#13;
    latency = time.time() - request.state.start_time&#13;
    http_request_duration_seconds.labels(&#13;
        request.method, request.url.path&#13;
    ).observe(latency)&#13;
    http_request_size_bytes.labels(&#13;
        request.method, request.url.path&#13;
    ).observe(request.headers.get('Content-Length', 0))&#13;
    if isinstance(response, StreamingResponse):&#13;
        response_size = 0&#13;
    else:&#13;
        response_size = len(response.content)&#13;
    http_response_size_bytes.labels(&#13;
        request.method, request.url.path&#13;
    ).observe(response_size)&#13;
    http_requests_total.labels(&#13;
        request.method, request.url.path, response.status_code&#13;
    ).inc()&#13;
    return response&#13;
&#13;
@app.middleware('http')&#13;
async def increment_counter(request: Request, call_next):&#13;
    active_requests.inc()&#13;
    response = await call_next(request)&#13;
    active_requests.dec()&#13;
    return response&#13;
&#13;
@app.middleware('http')&#13;
async def log_saturation(request: Request, call_next):&#13;
    max_concurrent_requests = 10  # set the maximum number of concurrent requests&#13;
    saturation_ratio = active_requests._value._value / max_concurrent_requests&#13;
    print(f'Saturation: {saturation_ratio}')&#13;
    return await call_next(request)&#13;
&#13;
@app.middleware('http')&#13;
async def increment_error_counter(request: Request, call_next):&#13;
    try:&#13;
        response = await call_next(request)&#13;
        return response&#13;
    except HTTPException as e:&#13;
        error_counter.labels(&#13;
            request.method, request.url.path, e.status_code&#13;
        ).inc()&#13;
        print(f'Incremented error counter for {request.method} {request.url.path} {e.status_code}')&#13;
        raise e&#13;
&#13;
&#13;
@app.get('/')&#13;
async def root():&#13;
    return {'message': 'FastAPI server is running. Metrics are available at /metrics'}&#13;
&#13;
&#13;
@app.get('/generate_traffic')&#13;
async def generate_traffic():&#13;
    for i in range(100):&#13;
        response = await root()&#13;
        print(response)&#13;
    return {'message': 'Generated traffic successfully.'}&#13;
&#13;
&#13;
@app.get('/generate_error')&#13;
async def generate_error():&#13;
    raise HTTPException(status_code=500, detail='Generated an error.')&#13;
&#13;
# 获取和更新系统监控数据&#13;
def collect_system_metrics():&#13;
    # 更新 CPU 使用率&#13;
    cpu_usage.set(psutil.cpu_percent(interval=1))&#13;
    &#13;
    # 更新内存使用情况&#13;
    memory = psutil.virtual_memory()&#13;
    memory_usage.set(memory.percent)&#13;
    &#13;
    # 更新磁盘使用情况&#13;
    disk = psutil.disk_usage('/')&#13;
    disk_usage.set(disk.percent)&#13;
    &#13;
    # 更新网络流量&#13;
    net_io = psutil.net_io_counters()&#13;
    network_in.set(net_io.bytes_recv)&#13;
    network_out.set(net_io.bytes_sent)&#13;
&#13;
@app.get('/metrics')&#13;
async def metrics():&#13;
    collect_system_metrics()&#13;
    return Response(content=generate_latest(), media_type=CONTENT_TYPE_LATEST)&#13;
```&#13;
。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/zhan-dian-ke-kao-xing-gong-cheng-%20SRE%20-zui-jia-shi-jian-%20--%20-huang-jin-jian-kong-xin-hao.html</guid><pubDate>Wed, 13 Nov 2024 09:50:02 +0000</pubDate></item><item><title>优秀运维脚本</title><link>https://ignorantcaomao.github.io/post/you-xiu-yun-wei-jiao-ben.html</link><description>### 根据PID过滤进程所有信息&#13;
```shell&#13;
#! /bin/bash&#13;
# Function: 根据用户输入的PID，过滤出该PID所有的信息&#13;
read -p '请输入要查询的PID: ' P&#13;
n=`ps -aux| awk '$2~/^'$P'$/{print $11}'|wc -l`&#13;
if [ $n -eq 0 ];then&#13;
 echo '该PID不存在！！'&#13;
 exit&#13;
fi&#13;
echo '--------------------------------'&#13;
echo '进程PID: $P'&#13;
echo '进程命令：`ps -aux| awk '$2~/^'$P'$/{print $11}'`'&#13;
echo '进程所属用户: `ps -aux| awk '$2~/^'$P'$/{print $1}'`'&#13;
echo 'CPU占用率：`ps -aux| awk '$2~/^'$P'$/{print $3}'`%'&#13;
echo '内存占用率：`ps -aux| awk '$2~/^'$P'$/{print $4}'`%'&#13;
echo '进程开始运行的时刻：`ps -aux| awk '$2~/^'$P'$/{print $9}'`'&#13;
echo '进程运行的时间：`ps -aux| awk '$2~/^'$P'$/{print $10}'`'&#13;
echo '进程状态：`ps -aux| awk '$2~/^'$P'$/{print $8}'`'&#13;
echo '进程虚拟内存：`ps -aux| awk '$2~/^'$P'$/{print $5}'`'&#13;
echo '进程共享内存：`ps -aux| awk '$2~/^'$P'$/{print $6}'`'&#13;
echo '--------------------------------'&#13;
```&#13;
### 根据进程名过滤进程信息&#13;
&#13;
```shell&#13;
#! /bin/bash&#13;
# Function: 根据输入的程序的名字过滤出所对应的PID，并显示出详细信息，如果有几个PID，则全部显示&#13;
read -p '请输入要查询的进程名：' NAME&#13;
N=`ps -aux | grep $NAME | grep -v grep | wc -l` ##统计进程总数&#13;
if [ $N -le 0 ];then&#13;
  echo '该进程名没有运行！'&#13;
fi&#13;
i=1&#13;
while [ $N -gt 0 ]&#13;
do&#13;
  echo '进程PID: `ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $2}'`'&#13;
  echo '进程命令：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $11}'`'&#13;
  echo '进程所属用户: `ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $1}'`'&#13;
  echo 'CPU占用率：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $3}'`%'&#13;
  echo '内存占用率：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $4}'`%'&#13;
  echo '进程开始运行的时刻：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $9}'`'&#13;
  echo '进程运行的时间：` ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $11}'`'&#13;
  echo '进程状态：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $8}'`'&#13;
  echo '进程虚拟内存：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $5}'`'&#13;
  echo '进程共享内存：`ps -aux | grep $NAME | grep -v grep | awk 'NR=='$i'{print $0}'| awk '{print $6}'`'&#13;
  echo '***************************************************************'&#13;
  let N-- i++&#13;
done&#13;
```&#13;
### 根据用户名查询该用户的相关信息&#13;
&#13;
```shell&#13;
#! /bin/bash&#13;
# Function：根据用户名查询该用户的所有信息&#13;
read -p '请输入要查询的用户名：' A&#13;
echo '------------------------------'&#13;
n=`cat /etc/passwd | awk -F: '$1~/^'$A'$/{print}' | wc -l`&#13;
if [ $n -eq 0 ];then&#13;
echo '该用户不存在'&#13;
echo '------------------------------'&#13;
else&#13;
  echo '该用户的用户名：$A'&#13;
  echo '该用户的UID：`cat /etc/passwd | awk -F: '$1~/^'$A'$/{print}'|awk -F: '{print $3}'`'&#13;
  echo '该用户的组为：`id $A | awk {'print $3'}`'&#13;
  echo '该用户的GID为：`cat /etc/passwd | awk -F: '$1~/^'$A'$/{print}'|awk -F: '{print $4}'`'&#13;
  echo '该用户的家目录为：`cat /etc/passwd | awk -F: '$1~/^'$A'$/{print}'|awk -F: '{print $6}'`'&#13;
  Login=`cat /etc/passwd | awk -F: '$1~/^'$A'$/{print}'|awk -F: '{print $7}'`&#13;
  if [ $Login == '/bin/bash' ];then&#13;
  echo '该用户有登录系统的权限！！'&#13;
  echo '------------------------------'&#13;
  elif [ $Login == '/sbin/nologin' ];then&#13;
  echo '该用户没有登录系统的权限！！'&#13;
  echo '------------------------------'&#13;
  fi&#13;
fi&#13;
```&#13;
### 加固系统的一些配置&#13;
&#13;
```shell&#13;
#! /bin/bash&#13;
# Function:对账户的密码的一些加固&#13;
read -p '设置密码最多可多少天不修改：' A&#13;
read -p '设置密码修改之间最小的天数：' B&#13;
read -p '设置密码最短的长度：' C&#13;
read -p '设置密码失效前多少天通知用户：' D&#13;
sed -i '/^PASS_MAX_DAYS/c\PASS_MAX_DAYS '$A'' /etc/login.defs&#13;
sed -i '/^PASS_MIN_DAYS/c\PASS_MIN_DAYS '$B'' /etc/login.defs&#13;
sed -i '/^PASS_MIN_LEN/c\PASS_MIN_LEN '$C'' /etc/login.defs&#13;
sed -i '/^PASS_WARN_AGE/c\PASS_WARN_AGE '$D'' /etc/login.defs&#13;
&#13;
echo '已对密码进行加固，新用户不得和旧密码相同，且新密码必须同时包含数字、小写字母，大写字母！！'&#13;
sed -i '/pam_pwquality.so/c\password requisite pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type= difok=1 minlen=8 ucredit=-1 lcredit=-1 dcredit=-1' /etc/pam.d/system-auth&#13;
&#13;
echo '已对密码进行加固，如果输入错误密码超过3次，则锁定账户！！'&#13;
n=`cat /etc/pam.d/sshd | grep 'auth required pam_tally2.so '|wc -l`&#13;
if [ $n -eq 0 ];then&#13;
sed -i '/%PAM-1.0/a\auth required pam_tally2.so deny=3 unlock_time=150 even_deny_root root_unlock_time300' /etc/pam.d/sshd&#13;
fi&#13;
&#13;
echo  '已设置禁止root用户远程登录！！'&#13;
sed -i '/PermitRootLogin/c\PermitRootLogin no'  /etc/ssh/sshd_config&#13;
&#13;
read -p '设置历史命令保存条数：' E&#13;
read -p '设置账户自动注销时间：' F&#13;
sed -i '/^HISTSIZE/c\HISTSIZE='$E'' /etc/profile&#13;
sed -i '/^HISTSIZE/a\TMOUT='$F'' /etc/profile&#13;
&#13;
echo '已设置只允许wheel组的用户可以使用su命令切换到root用户！'&#13;
sed -i '/pam_wheel.so use_uid/c\auth required pam_wheel.so use_uid ' /etc/pam.d/su&#13;
n=`cat /etc/login.defs | grep SU_WHEEL_ONLY | wc -l`&#13;
if [ $n -eq 0 ];then&#13;
echo SU_WHEEL_ONLY yes &gt;&gt; /etc/login.defs&#13;
fi&#13;
&#13;
echo '即将对系统中的账户进行检查....'&#13;
echo '系统中有登录权限的用户有：'&#13;
awk -F: '($7=='/bin/bash'){print $1}' /etc/passwd&#13;
echo '********************************************'&#13;
echo '系统中UID=0的用户有：'&#13;
awk -F: '($3=='0'){print $1}' /etc/passwd&#13;
echo '********************************************'&#13;
N=`awk -F: '($2==''){print $1}' /etc/shadow|wc -l`&#13;
echo '系统中空密码用户有：$N'&#13;
if [ $N -eq 0 ];then&#13;
 echo '恭喜你，系统中无空密码用户！！'&#13;
 echo '********************************************'&#13;
else&#13;
 i=1&#13;
 while [ $N -gt 0 ]&#13;
 do&#13;
    None=`awk -F: '($2==''){print $1}' /etc/shadow|awk 'NR=='$i'{print}'`&#13;
    echo '------------------------'&#13;
    echo $None&#13;
    echo '必须为空用户设置密码！！'&#13;
    passwd $None&#13;
    let N--&#13;
 done&#13;
 M=`awk -F: '($2==''){print $1}' /etc/shadow|wc -l`&#13;
 if [ $M -eq 0 ];then&#13;
  echo '恭喜，系统中已经没有空密码用户了！'&#13;
 else&#13;
echo '系统中还存在空密码用户：$M'&#13;
 fi&#13;
fi&#13;
&#13;
echo '即将对系统中重要文件进行锁定，锁定后将无法添加删除用户和组'&#13;
read -p '警告：此脚本运行后将无法添加删除用户和组！！确定输入Y，取消输入N；Y/N：' i&#13;
case $i in&#13;
      [Y,y])&#13;
            chattr +i /etc/passwd&#13;
            chattr +i /etc/shadow&#13;
            chattr +i /etc/group&#13;
            chattr +i /etc/gshadow&#13;
            echo '锁定成功！'&#13;
;;&#13;
      [N,n])&#13;
            chattr -i /etc/passwd&#13;
            chattr -i /etc/shadow&#13;
            chattr -i /etc/group&#13;
            chattr -i /etc/gshadow&#13;
            echo '取消锁定成功！！'&#13;
;;&#13;
       *)&#13;
            echo '请输入Y/y or N/n'&#13;
esac&#13;
```&#13;
&#13;
### ssh 远程连接免输密码&#13;
```shell&#13;
#!/bin/bash&#13;
 &#13;
# 安装sshpass工具&#13;
yum install -y sshpass&#13;
&#13;
# 目标服务器的IP地址或主机名&#13;
HOST='192.168.3.55'&#13;
# 登录用户名&#13;
USER='root'&#13;
# 登录密码&#13;
PASS='1-techstar'&#13;
# 要执行的命令&#13;
COMMAND='ls'&#13;
 &#13;
# 使用sshpass执行SSH命令&#13;
sshpass -p $PASS ssh -o StrictHostKeyChecking=no -p 22 $USER@$HOST $COMMAND&#13;
```。</description><guid isPermaLink="true">https://ignorantcaomao.github.io/post/you-xiu-yun-wei-jiao-ben.html</guid><pubDate>Thu, 10 Oct 2024 07:33:13 +0000</pubDate></item></channel></rss>